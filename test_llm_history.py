#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
"""

import asyncio
import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.llm_utils import LLMSelector
from bot.services.history_service import HistoryService


async def test_llm_with_history():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    llm_selector = LLMSelector()
    history_service = HistoryService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 888888
    
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        await history_service.clear_history(test_user_id)
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (Google Gemini)
        await llm_selector.provider_manager.set_provider("google")
        await llm_selector.provider_manager.set_model("models/gemini-2.5-flash")
        print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω: Google Gemini")
        
        # –ü–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥ - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º—Å—è
        print("\nüìù –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º—Å—è")
        response1 = await llm_selector.generate_response(
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, –º–Ω–µ 25 –ª–µ—Ç, —è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç.",
            user_id=test_user_id
        )
        print(f"ü§ñ –û—Ç–≤–µ—Ç LLM: {response1}")
        
        # –í—Ç–æ—Ä–æ–π –¥–∏–∞–ª–æ–≥ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≥–æ–¥–µ
        print("\nüìù –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≥–æ–¥–µ")
        response2 = await llm_selector.generate_response(
            "–ö–∞–∫ –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?",
            user_id=test_user_id
        )
        print(f"ü§ñ –û—Ç–≤–µ—Ç LLM: {response2}")
        
        # –¢—Ä–µ—Ç–∏–π –¥–∏–∞–ª–æ–≥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        print("\nüìù –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å")
        response3 = await llm_selector.generate_response(
            "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –∏ —Å–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?",
            user_id=test_user_id
        )
        print(f"ü§ñ –û—Ç–≤–µ—Ç LLM: {response3}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ LLM –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç
        if "–ê–ª–µ–∫—Å–µ–π" in response3 and "25" in response3:
            print("‚úÖ LLM –ø–æ–º–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏!")
            return True
        else:
            print("‚ùå LLM –Ω–µ –ø–æ–º–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
            print(f"   –û–∂–∏–¥–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ê–ª–µ–∫—Å–µ–π' –∏ '25' –≤ –æ—Ç–≤–µ—Ç–µ: {response3}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv("GOOGLE_API_KEY"):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç GOOGLE_API_KEY")
        return False
    
    success = await test_llm_with_history()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ LLM –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ LLM")
        print("   - LLM –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏")
        print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏")
    
    return success


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)